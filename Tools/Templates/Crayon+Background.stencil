
import Foundation

public extension Crayon {
{% filter removeFirstNewline %}{% for color in colors %}
    static func background{% filter upperFirstLetter %}{{ color }}{% endfilter %}(_ message: String) -> Self {
        Crayon(message: message, background: .color(.{{ color }}))
    }
{% endfor %}{% endfilter %}
    static func background(_ message: String, color: ANSIColor) -> Self {
        Crayon(message: message, background: .color(color))
    }

    static func background(_ message: String, color: UInt8) -> Self {
        Crayon(message: message, background: .color256(color))
    }

    static func background(_ message: String, red: UInt8, green: UInt8, blue: UInt8) -> Self {
        Crayon(message: message, background: .trueColor(red: red, green: green, blue: blue))
    }

    static func background(_ message: String, color: String) -> Self {
        Crayon(message: message, background: Utils.makeColor(from: color))
    }
}

public extension Crayon {
{% filter removeFirstNewline %}{% for color in colors %}
    func background{% filter upperFirstLetter %}{{ color }}{% endfilter %}() -> Self {
        update(background: .color(.{{ color }}))
    }
{% endfor %}{% endfilter %}
    func background(_ color: ANSIColor) -> Self {
        update(background: .color(color))
    }

    func background(_ color: UInt8) -> Self {
        update(background: .color256(color))
    }

    func background(red: UInt8, green: UInt8, blue: UInt8) -> Self {
        update(background: .trueColor(red: red, green: green, blue: blue))
    }

    func background(_ hex: String) -> Self {
        update(background: Utils.makeColor(from: hex))
    }
}
